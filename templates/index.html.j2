<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>GitHub Trending Repositories History</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        body { font-family: Arial, sans-serif; margin: 2em; background: #f9f9f9; }
        h1, h2, h3 { color: #333; }
        .container { max-width: 1400px; margin: 0 auto; }
        .section { background: #fff; margin: 20px 0; padding: 20px; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }
        table { border-collapse: collapse; width: 100%; background: #fff; }
        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
        th { background: #f0f0f0; }
        tr:nth-child(even) { background: #f6f6f6; }
        .lang { font-size: 0.9em; color: #666; }
        .streak { font-weight: bold; color: #0070f3; }
        .repo-name { font-weight: bold; }
        .rank-cell { text-align: center; }
        .category-badge { 
            padding: 2px 8px; 
            border-radius: 12px; 
            font-size: 0.8em; 
            font-weight: bold; 
            color: white; 
            display: inline-block;
            margin-left: 8px;
        }
        /* Category colors - using more specific selectors */
        .category-badge.category-aiml { background: #ff6b6b; }
        .category-badge.category-webdevelopment { background: #4ecdc4; }
        .category-badge.category-mobile { background: #45b7d1; }
        .category-badge.category-devops { background: #96ceb4; }
        .category-badge.category-datascience { background: #feca57; }
        .category-badge.category-systemos { background: #ff9ff3; }
        .category-badge.category-security { background: #ff9f43; }
        .category-badge.category-learning { background: #54a0ff; }
        .category-badge.category-other { background: #5f27cd; }
        /* Fallback for any unmatched categories */
        .category-badge:not([class*="category-"]) { background: #6c757d; }
        .today-badge { background: #28a745; color: white; padding: 2px 6px; border-radius: 3px; font-size: 0.8em; }
        .nav-tabs { border-bottom: 1px solid #ddd; margin-bottom: 20px; }
        .nav-tabs a { display: inline-block; padding: 10px 20px; text-decoration: none; color: #666; border-bottom: 2px solid transparent; }
        .nav-tabs a.active { color: #0070f3; border-bottom-color: #0070f3; }
        .tab-content { display: none; }
        .tab-content.active { display: block; }
        .stats { display: flex; gap: 20px; margin-bottom: 20px; flex-wrap: wrap; }
        .stat-box { background: #f8f9fa; padding: 15px; border-radius: 5px; text-align: center; flex: 1; min-width: 120px; }
        .stat-number { font-size: 2em; font-weight: bold; color: #0070f3; }
        .stat-label { color: #666; font-size: 0.9em; }
        .filters { margin: 20px 0; padding: 15px; background: #f8f9fa; border-radius: 5px; }
        .filter-group { display: inline-block; margin-right: 20px; }
        .filter-group label { font-weight: bold; margin-right: 8px; }
        .filter-group select, .filter-group input { padding: 6px; border: 1px solid #ddd; border-radius: 3px; }
        .search-box { width: 300px; }
        .date-selector { margin: 20px 0; padding: 15px; background: #f8f9fa; border-radius: 5px; }
        .date-selector label { font-weight: bold; margin-right: 10px; }
        .date-selector select { padding: 8px; border: 1px solid #ddd; border-radius: 3px; margin-right: 10px; }
        .date-selector button { padding: 8px 16px; background: #0070f3; color: white; border: none; border-radius: 3px; cursor: pointer; }
        .date-selector button:hover { background: #0056b3; }
        .no-data { text-align: center; color: #666; font-style: italic; padding: 40px; }
        .chart-container { margin: 20px 0; height: 400px; }
        .category-stats { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px; margin: 20px 0; }
        .category-card { background: #fff; padding: 15px; border-radius: 8px; border-left: 4px solid #0070f3; }
        .category-name { font-weight: bold; margin-bottom: 5px; }
        .category-count { color: #0070f3; font-size: 1.2em; }
    </style>
</head>
<body>
    <div class="container">
        <h1>GitHub Trending Repositories History</h1>
        
        <!-- Statistics -->
        <div class="stats">
            <div class="stat-box">
                <div class="stat-number">{{ dates|length }}</div>
                <div class="stat-label">Total Days</div>
            </div>
            <div class="stat-box">
                <div class="stat-number">{{ all_repos|length }}</div>
                <div class="stat-label">Total Repositories</div>
            </div>
            <div class="stat-box">
                <div class="stat-number">{{ today_repos|length }}</div>
                <div class="stat-label">Today's Trending</div>
            </div>
            <div class="stat-box">
                <div class="stat-number">{{ categories|length }}</div>
                <div class="stat-label">Categories</div>
            </div>
        </div>

        <!-- Category Statistics -->
        <div class="section">
            <h2>Category Distribution</h2>
            <div class="category-stats">
                {% for category, stats in category_stats.items() %}
                <div class="category-card">
                    <div class="category-name">{{ category }}</div>
                    <div class="category-count">{{ stats.count }} repos</div>
                </div>
                {% endfor %}
            </div>
        </div>

        <!-- Navigation tabs -->
        <div class="nav-tabs">
            <a href="#today" class="active" onclick="showTab('today')">Today's Trending</a>
            <a href="#historical" onclick="showTab('historical')">Historical Data</a>
            <a href="#trends" onclick="showTab('trends')">Trends Analysis</a>
        </div>

        <!-- Today's Trending -->
        <div id="today" class="tab-content active">
            <div class="section">
                <h2>Today's GitHub Trending ({{ today }})</h2>
                
                <!-- Filters -->
                <div class="filters">
                    <div class="filter-group">
                        <label for="categoryFilter">Category:</label>
                        <select id="categoryFilter" onchange="filterTable()">
                            <option value="">All Categories</option>
                            {% for category in categories %}
                            <option value="{{ category }}">{{ category }}</option>
                            {% endfor %}
                        </select>
                    </div>
                    <div class="filter-group">
                        <label for="searchBox">Search:</label>
                        <input type="text" id="searchBox" class="search-box" placeholder="Search repositories..." onkeyup="filterTable()">
                    </div>
                </div>

                {% if today_repos %}
                    <table id="todayTable">
                        <thead>
                            <tr>
                                <th>Rank</th>
                                <th>Repository</th>
                                <th>Description</th>
                                <th>Language</th>
                                <th>Category</th>
                                <th>Streak (days)</th>
                            </tr>
                        </thead>
                        <tbody>
                        {% for repo in today_repos %}
                            <tr data-category="{{ repo.category }}" data-name="{{ repo.name|lower }}" data-description="{{ repo.description|lower }}">
                                <td class="rank-cell">{{ repo.rank }}</td>
                                <td class="repo-name">
                                    <a href="{{ repo.link }}" target="_blank">{{ repo.name }}</a>
                                    <span class="today-badge">TODAY</span>
                                </td>
                                <td>{{ repo.description }}</td>
                                <td class="lang">{{ repo.language }}</td>
                                <td>
                                    <span class="category-badge category-{{ repo.category|lower|replace('/', '')|replace(' ', '')|replace('&', '') }}">
                                        {{ repo.category }}
                                    </span>
                                </td>
                                <td class="streak">{{ repo.streak }}</td>
                            </tr>
                        {% endfor %}
                        </tbody>
                    </table>
                {% else %}
                    <p>No data available for today yet.</p>
                {% endif %}
            </div>
        </div>

        <!-- Historical Data -->
        <div id="historical" class="tab-content">
            <div class="section">
                <h2>Historical Data</h2>
                <div class="date-selector">
                    <label for="dateSelect">Choose a date:</label>
                    <select id="dateSelect">
                        {% for date in dates %}
                            <option value="{{ date }}" {% if date == today %}selected{% endif %}>{{ date }}</option>
                        {% endfor %}
                    </select>
                    <button onclick="loadDateData()">Load Data</button>
                </div>
                <div id="selectedDateContent">
                    <div class="no-data">Select a date above to view trending data</div>
                </div>
            </div>
        </div>

        <!-- Trends Analysis -->
        <div id="trends" class="tab-content">
            <div class="section">
                <h2>Trends Analysis</h2>
                <div class="chart-container">
                    <canvas id="categoryChart"></canvas>
                </div>
                <div class="chart-container">
                    <canvas id="streakChart"></canvas>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Store date data
        const dateData = {
            {% for date in dates %}
                '{{ date }}': {{ get_repos_by_date(date) | tojson }},
            {% endfor %}
        };

        // Category data for charts
        const categoryData = {{ category_stats | tojson }};
        const categories = {{ categories | tojson }};

        // Function to get category CSS class
        function getCategoryClass(category) {
            if (!category) return 'category-other';
            
            const categoryMap = {
                'AI/ML': 'category-aiml',
                'Web Development': 'category-webdevelopment',
                'Mobile': 'category-mobile',
                'DevOps': 'category-devops',
                'Data Science': 'category-datascience',
                'System/OS': 'category-systemos',
                'Security': 'category-security',
                'Learning': 'category-learning',
                'Other': 'category-other'
            };
            
            return categoryMap[category] || 'category-other';
        }

        function showTab(tabName) {
            // Hide all tab contents
            var tabContents = document.getElementsByClassName('tab-content');
            for (var i = 0; i < tabContents.length; i++) {
                tabContents[i].classList.remove('active');
            }
            
            // Remove active class from all tabs
            var navTabs = document.querySelectorAll('.nav-tabs a');
            for (var i = 0; i < navTabs.length; i++) {
                navTabs[i].classList.remove('active');
            }
            
            // Show selected tab content
            document.getElementById(tabName).classList.add('active');
            
            // Add active class to selected tab
            event.target.classList.add('active');

            // Initialize charts if trends tab is selected
            if (tabName === 'trends') {
                initializeCharts();
            }
        }

        function filterTable() {
            const categoryFilter = document.getElementById('categoryFilter').value.toLowerCase();
            const searchBox = document.getElementById('searchBox').value.toLowerCase();
            const table = document.getElementById('todayTable');
            const rows = table.getElementsByTagName('tbody')[0].getElementsByTagName('tr');

            for (let row of rows) {
                const category = row.getAttribute('data-category').toLowerCase();
                const name = row.getAttribute('data-name');
                const description = row.getAttribute('data-description');
                
                const categoryMatch = !categoryFilter || category.includes(categoryFilter);
                const searchMatch = !searchBox || name.includes(searchBox) || description.includes(searchBox);
                
                row.style.display = categoryMatch && searchMatch ? '' : 'none';
            }
        }

        function loadDateData() {
            const selectedDate = document.getElementById('dateSelect').value;
            const repos = dateData[selectedDate] || [];
            const contentDiv = document.getElementById('selectedDateContent');
            
            if (repos.length === 0) {
                contentDiv.innerHTML = '<div class="no-data">No data available for this date</div>';
                return;
            }

            let tableHTML = `
                <h3>GitHub Trending on ${selectedDate}</h3>
                <table>
                    <thead>
                        <tr>
                            <th>Rank</th>
                            <th>Repository</th>
                            <th>Description</th>
                            <th>Language</th>
                            <th>Category</th>
                            <th>Streak (days)</th>
                        </tr>
                    </thead>
                    <tbody>
            `;

            repos.forEach(repo => {
                const categoryClass = getCategoryClass(repo.category);
                tableHTML += `
                    <tr>
                        <td class="rank-cell">${repo.rank}</td>
                        <td class="repo-name">
                            <a href="${repo.link}" target="_blank">${repo.name}</a>
                            ${selectedDate === '{{ today }}' ? '<span class="today-badge">TODAY</span>' : ''}
                        </td>
                        <td>${repo.description}</td>
                        <td class="lang">${repo.language}</td>
                        <td>
                            <span class="category-badge ${categoryClass}">
                                ${repo.category || 'Other'}
                            </span>
                        </td>
                        <td class="streak">${repo.streak}</td>
                    </tr>
                `;
            });

            tableHTML += `
                    </tbody>
                </table>
            `;

            contentDiv.innerHTML = tableHTML;
        }

        function initializeCharts() {
            // Category distribution chart
            const categoryCtx = document.getElementById('categoryChart').getContext('2d');
            new Chart(categoryCtx, {
                type: 'doughnut',
                data: {
                    labels: Object.keys(categoryData),
                    datasets: [{
                        data: Object.values(categoryData).map(cat => cat.count),
                        backgroundColor: [
                            '#ff6b6b', '#4ecdc4', '#45b7d1', '#96ceb4', 
                            '#feca57', '#ff9ff3', '#ff9f43', '#54a0ff', '#5f27cd'
                        ]
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        title: {
                            display: true,
                            text: 'Repository Distribution by Category'
                        }
                    }
                }
            });

            // Top repositories by streak
            const topRepos = {{ all_repos | tojson }}.slice(0, 10);
            const streakCtx = document.getElementById('streakChart').getContext('2d');
            new Chart(streakCtx, {
                type: 'bar',
                data: {
                    labels: topRepos.map(repo => repo.name.split('/')[1]),
                    datasets: [{
                        label: 'Consecutive Days',
                        data: topRepos.map(repo => repo.streak),
                        backgroundColor: '#0070f3'
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        title: {
                            display: true,
                            text: 'Top 10 Repositories by Consecutive Days'
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            });
        }

        // Auto-load today's data on page load if today is selected
        window.onload = function() {
            const dateSelect = document.getElementById('dateSelect');
            if (dateSelect.value === '{{ today }}') {
                loadDateData();
            }
        };
    </script>

    <footer style="margin-top:2em; color:#888; font-size:0.9em; text-align:center;">
        Generated on {{ today }} | Data from {{ dates[0] }} to {{ dates[-1] }}
    </footer>
</body>
</html> 